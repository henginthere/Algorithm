import java.util.*;

class Solution {
    public int solution(int[][] jobs) {
        
        int answer = 0;
        int count = 0; // 처리된 디스크
        int now = 0; //작업이 끝난시간
        //주어진 배열 요청시간 빠른 순으로 정렬
        Arrays.sort(jobs, ((o1, o2) -> o1[0]-o2[0]));
        
        PriorityQueue<int[]> pq = new PriorityQueue<>(((o1,o2)->o1[1]-o2[1])); //우선순위큐 커스터마이징
        int i=0;
        while(count<jobs.length){
            while(i<jobs.length&&jobs[i][0]<=now){ //작업이 종료된 시간보다 이전에 요청된 작업들만 큐에 넣는다.
                pq.add(jobs[i++]);
                System.out.println(i);
            }
            if(pq.isEmpty()){
                now = jobs[i][0];
            }
            else{
                System.out.println("d");
                int[] tmp = pq.poll();
                answer += tmp[1] + now - tmp[0];
                now+=tmp[1];
                count++;
            }
        }
        return answer/jobs.length;
    }
}