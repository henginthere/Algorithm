import java.util.*;
import java.io.*;

public class Solution
{
    static int T, N, M, R, C, L;

    static int[][] map;
    static int answer;
    static boolean[][] visited;
    static boolean[][] place;
    static int[] dx = {-1,1,0,0};
    static int[] dy = {0,0,-1,1};
    static void start(int x, int y, int len, int time){

        place[x][y]=true;

        if(time==L){
            //answer += len;
            return;
        }


        int n = map[x][y];
        switch (n){
            case 1:
                for(int d=0;d<4;d++){
                    int nx = x+dx[d];
                    int ny = y+dy[d];
                    if(!isIn(nx,ny)) continue;
                    if(!visited[nx][ny]&&move(d,nx,ny)){
                        visited[nx][ny]=true;
                        start(nx, ny, len+1, time+1);
                        visited[nx][ny]=false;
                    }
                }
                break;
            case 2:
                for(int d=0;d<=1;d++){
                    int nx = x+dx[d];
                    int ny = y+dy[d];
                    if(!isIn(nx,ny)) continue;
                    if(!visited[nx][ny]&&move(d,nx,ny)){
                        visited[nx][ny]=true;
                        start(nx, ny, len+1, time+1);
                        visited[nx][ny]=false;
                    }
                }
                break;
            case 3:
                for(int d=2;d<=3;d++){
                    int nx = x+dx[d];
                    int ny = y+dy[d];
                    if(!isIn(nx,ny)) continue;
                    if(!visited[nx][ny]&&move(d,nx,ny)){
                        visited[nx][ny]=true;
                        start(nx, ny, len+1, time+1);
                        visited[nx][ny]=false;
                    }
                }
                break;
            case 4:
                for(int d=0;d<4;d=d+3){
                    int nx = x+dx[d];
                    int ny = y+dy[d];
                    if(!isIn(nx,ny)) continue;
                    if(!visited[nx][ny]&&move(d,nx,ny)){
                        visited[nx][ny]=true;
                        start(nx, ny, len+1, time+1);
                        visited[nx][ny]=false;
                    }
                }
                break;
            case 5:
                for(int d=1;d<4;d=d+2){
                    int nx = x+dx[d];
                    int ny = y+dy[d];
                    if(!isIn(nx,ny)) continue;
                    if(!visited[nx][ny]&&move(d,nx,ny)){
                        visited[nx][ny]=true;
                        start(nx, ny, len+1, time+1);
                        visited[nx][ny]=false;
                    }
                }
                break;
            case 6:
                for(int d=1;d<=2;d++){
                    int nx = x+dx[d];
                    int ny = y+dy[d];
                    if(!isIn(nx,ny)) continue;
                    if(!visited[nx][ny]&&move(d,nx,ny)){
                        visited[nx][ny]=true;
                        start(nx, ny, len+1, time+1);
                        visited[nx][ny]=false;
                    }
                }
                break;
            case 7:
                for(int d=0;d<3;d=d+2){
                    int nx = x+dx[d];
                    int ny = y+dy[d];
                    if(!isIn(nx,ny)) continue;
                    if(!visited[nx][ny]&&move(d,nx,ny)){
                        visited[nx][ny]=true;
                        start(nx, ny, len+1, time+1);
                        visited[nx][ny]=false;
                    }
                }
                break;
            default:
        }

    }

    static boolean isIn(int x, int y){
        if(x<0||x>=N||y<0||y>=M){
            return false;
        }
        return true;
    }

    static boolean move(int d, int x, int y){
        int n = map[x][y];
        boolean r = false;
        switch (d){
            case 0:
                if(n==1||n==2||n==5||n==6) r=true;
                break;
            case 1:
                if(n==1||n==2||n==4||n==7)
                    r=true;
                break;
            case 2:
                if(n==1||n==3||n==4||n==5) r=true;
                break;
            case 3:
                if(n==1||n==3||n==6||n==7) r=true;
                break;
        }
        return r;
    }


    public static void main(String args[]) throws Exception
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        T = Integer.parseInt(st.nextToken());

        for(int tc=1;tc<=T;tc++){
            answer = 0;
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());
            map = new int[N][M];
            visited = new boolean[N][M];
            place = new boolean[N][M];
            R = Integer.parseInt(st.nextToken());
            C = Integer.parseInt(st.nextToken());
            L = Integer.parseInt(st.nextToken());

            for(int i=0;i<N;i++){
                st = new StringTokenizer(br.readLine());
                for(int j=0;j<M;j++){
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }

            start(R, C, 1, 1);

            for(int i=0;i<N;i++){
                for(int j=0;j<M;j++){
                    if(place[i][j]) {
                        answer++;
                    }
                }
            }
            System.out.println("#"+tc+" "+answer);
        }

    }
}
