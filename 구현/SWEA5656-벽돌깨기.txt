import java.util.*;
import java.io.*;



public class Solution
{
    static class Point{
        int x;
        int y;
        int size;

        Point(int x, int y, int size){
            this.x = x;
            this.y = y;
            this.size = size;
        }
    }

    static int T, N, W, H;
    static int[][] map;
    static int[][] copyMap;
    static int ans;
    static int[] throwBalls;
    static int[] dx = {0,0,-1,1};
    static int[] dy = {-1,1,0,0};


    static void getThrowBalls(int cnt){ //던질 구슬 위치 구하기
        if(cnt==N){
            goThrow(); //던지기
            getMin(); //최소값 갱신
            for(int i=0;i<H;i++){
                for(int j=0;j<W;j++){
                    map[i][j] = copyMap[i][j];
                }
            }
            return;
        }
        for(int i=0;i<W;i++){
            throwBalls[cnt] = i;
            getThrowBalls(cnt+1);
        }
    }

    static void getMin(){
        int cnt=0;
        for(int i=0;i<H;i++){
            for(int j=0;j<W;j++){
                if(map[i][j]>0){
                    cnt++;
                }
            }
        }
        if(cnt<ans){
            ans = cnt;
        }
    }

    static void goThrow(){
        int h=H-1;
        for(int i=0;i<throwBalls.length;i++){
            int turn = throwBalls[i]; //구슬을 떨어트릴 위치
            for(int j=0;j<H;j++){
                if(map[j][turn]>0){
                    h=j; //구슬이 떨어진 행 위치
                    break;
                }
            }
            destroy(h,turn); //h:행, turn 열
            moveBricks();
        }
    }

    static void destroy(int x, int y){
        Queue<Point> queue = new LinkedList<>();
        queue.add(new Point(x,y,map[x][y]));
        map[x][y]=0;

        while(!queue.isEmpty()){
            Point tmp = queue.poll();
            int power = tmp.size;
            for(int p=1;p<power;p++){
                for(int i=0;i<4;i++){
                    int nx = tmp.x + dx[i] * p;
                    int ny = tmp.y + dy[i] * p;
                    if(!isIn(nx,ny)||map[nx][ny]==0){
                        continue;
                    }
                    if(map[nx][ny]>0){
                        queue.add(new Point(nx,ny,map[nx][ny]));
                        map[nx][ny]=0;
                        continue;
                    }
                }
            }
        }
    }

    static void moveBricks(){
        Stack<Integer> stack = new Stack<>();
        //열 고정
        for(int i=0;i<W;i++){
            for(int j=0;j<H;j++){
                if(map[j][i]>0){
                    stack.add(map[j][i]);
                }
            }
            for(int j=H-1;j>=0;j--){
                if(stack.isEmpty()){
                    map[j][i]=0;
                }
                else{
                    map[j][i]=stack.pop();
                }
            }
        }
    }

    static boolean isIn(int x, int y){
        if(x<0||x>=H||y<0||y>=W) return false;
        return true;
    }
    public static void main(String args[]) throws Exception
    {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        T = Integer.parseInt(br.readLine());
        for(int tc=1;tc<=T;tc++){
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            W = Integer.parseInt(st.nextToken());
            H = Integer.parseInt(st.nextToken());

            map = new int[H][W];
            copyMap = new int[H][W];
            throwBalls = new int[N];
            ans = Integer.MAX_VALUE;

            for(int i=0;i<H;i++){
                st = new StringTokenizer(br.readLine());
                for(int j=0;j<W;j++){
                    int tmp = Integer.parseInt(st.nextToken());
                    map[i][j] = tmp;
                    copyMap[i][j] = tmp;
                }
            }

            getThrowBalls(0);
            System.out.println("#"+tc+" "+ans);
        }

    }
}