import java.util.*;
import java.io.*;

public class Solution
{
    static class Point{
        int x;
        int y;

        Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int T, N, M;
    static int[][] map;
    static int ans;
    static boolean[][] visited;
    static Queue<Point> queue;
    static int[] dx = {-1,1,0,0};
    static int[] dy = {0,0,-1,1};

    static void init(){
        queue.clear();
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                visited[i][j] = false;
            }
        }
    }

    static boolean isIn(int x, int y){
        if(x<0||x>=N||y<0||y>=N) return false;
        return true;
    }

    static void start(int x, int y){
        queue.offer(new Point(x,y));
        visited[x][y] = true;
        int k=1;
        int house = map[x][y] == 1? 1: 0;

        if(k*k+(k-1)*(k-1)<=house*M) ans = ans > house ? ans : house;

        while(!queue.isEmpty()){
            int s = queue.size();
            k++;
            for(int i=0;i<s;i++){
                Point tmp = queue.poll();
                for(int d=0;d<4;d++){
                    int nx = tmp.x+dx[d];
                    int ny = tmp.y+dy[d];

                    if(!isIn(nx,ny)||visited[nx][ny]) continue;
                    if(map[nx][ny]==1) house++;
                    if(!visited[nx][ny]){
                        visited[nx][ny]=true;
                        queue.offer(new Point(nx,ny));
                    }
                }
            }
            if(k*k+(k-1)*(k-1)<=house*M) ans = ans > house ? ans : house;

        }
    }


    public static void main(String args[]) throws Exception
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        T = Integer.parseInt(br.readLine().trim());


        for(int tc=1;tc<=T;tc++){
            st = new StringTokenizer(br.readLine().trim());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());

            map = new int[N][N];
            visited = new boolean[N][N];
            queue = new LinkedList<>();
            ans = 0;

            for(int i=0;i<N;i++){
                st = new StringTokenizer(br.readLine());
                for(int j=0;j<N;j++){
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }

            for(int i=0;i<N;i++){
                for(int j=0;j<N;j++){
                    init();
                    start(i,j);
                }
            }
            System.out.println("#"+tc+" "+ans);
        }

    }
}