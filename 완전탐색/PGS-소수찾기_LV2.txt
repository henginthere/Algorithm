import java.util.*;
import java.math.*;
class Solution {
    
    public static HashSet<Integer> numberArr;
    static boolean[] visited;
    static String tmp;
    
    public boolean isPrime(int x){
        if(x<2) return false;
		
		for(int i=2; i*i<=x; i++) {
			if(x % i == 0) return false;
		}
		
		return true;
    }
    
    public void makeNum(String numbers, int n, int d){
        //n : 뽑을 개수
        //d : 깊이
        if(d==n) {
            numberArr.add(Integer.parseInt(tmp));
            return;
        }
        else{
            for(int i=0;i<numbers.length();i++){
                if(!visited[i]){
                    visited[i] = true;
                    tmp += numbers.charAt(i);
                    makeNum(numbers, n, d+1);
                    visited[i] = false;
                    tmp = tmp.substring(0, tmp.length()-1);
                }
            }
        }
        
    }
    
    
    public int solution(String numbers) {
        visited = new boolean[numbers.length()];
        numberArr = new HashSet<>();
        tmp = "";
        int cnt = 0;
        
        for(int i=1;i<=numbers.length();i++){
            makeNum(numbers,i,0);
        }
        
        
        for(Integer s:numberArr){
            if(isPrime(s)){
                cnt++;
            }
        }
        
        return cnt;
        
        
    }
}