import java.io.*;
import java.util.*;


class Point{
    int x;
    int y;
    Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}

public class Main {

    static int N;
    static boolean[][] visited;
    static boolean[][] down;
    static int[][] map;
    static Queue<Point> queue;
    static int min, max;
    static int[] dx = {0,0,-1,1};
    static int[] dy = {-1,1,0,0};
    static int answer;
    static int cnt;

    static int bfs(int x, int y){
        visited[x][y] = true;
        queue.add(new Point(x, y));

        while(!queue.isEmpty()){
            Point tmp = queue.poll();
            int cx = tmp.x;
            int cy = tmp.y;

            for(int i=0;i<4;i++){
                int nx = cx + dx[i];
                int ny = cy + dy[i];
                if(isIn(nx,ny)&&!down[nx][ny]&&!visited[nx][ny]){
                    visited[nx][ny]=true;
                    queue.add(new Point(nx,ny));
                }
            }
        }
        return 1;
    }

    static boolean isIn(int x, int y){
        if(x<0||x>=N||y<0||y>=N) return false;
        return true;
    }

    static void check(int x){
        down = new boolean[N][N];
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                if(map[i][j]<=x){
                    down[i][j]=true;
                }
            }
        }
    }

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());
        map = new int[N][N];

        queue = new LinkedList<>();
        min = Integer.MAX_VALUE;
        max = Integer.MIN_VALUE;
        answer = 0;


        for(int i=0;i<N;i++){
            String tmp = br.readLine();
            st = new StringTokenizer(tmp);
            for(int j=0;j<N;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
                if(map[i][j]>max) max = map[i][j];
                if(map[i][j]<min) min = map[i][j];
            }
        }

        for(int i=min-1;i<=max;i++){
            cnt = 0;
            visited = new boolean[N][N];
            //잠기는거 체크하고
            check(i);
            //bfs로 구하고
            for(int j=0;j<N;j++){
                for(int k=0;k<N;k++){
                    if(!visited[j][k]&&!down[j][k]){
                        cnt+=bfs(j,k);
                    }
                }
            }
            //안전 영역 개수 갱신
            if(cnt>answer) answer = cnt;
        }

        System.out.println(answer);


    }
}



