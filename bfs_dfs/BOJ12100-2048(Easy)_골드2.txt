import java.util.*;
import java.io.*;

public class Main
{
    static int N;
    static int map[][];
    static int MAX;

    static void dfs(int[][] input, int cnt){
        //5번 이동했으면 종료
        if(cnt==5){
            return;
        }
        for(int d=0;d<4;d++){
            int[][] moved = move(input,d);
            dfs(moved,cnt+1);
        }
    }
    static int[][] move(int[][] input,int d){
        int[][] after = new int[N][N];

        switch (d){
            case 0:
                for(int i=0;i<N;i++){
                    int tmp = -1; //이전 숫자
                    int nxt = 0; //시작 인덱스
                    for(int j=0;j<N;j++){
                        if(input[j][i]==0) {
                            continue;
                        }
                        else {
                            if (tmp == input[j][i]) {
                                after[nxt - 1][i] = input[j][i] * 2;
                                tmp = -1;
                                MAX = Math.max(MAX,after[nxt - 1][i]);
                            } else {
                                after[nxt][i] = input[j][i];
                                tmp = input[j][i];
                                nxt++;
                            }
                        }
                    }
                }
                break;
            case 1:
                for(int i=0;i<N;i++){
                    int tmp = -1; //이전 숫자
                    int nxt = N-1; //시작 인덱스
                    for(int j=N-1;j>=0;j--){
                        if(input[j][i]==0) continue;
                        else {
                            if (tmp == input[j][i]) {
                                after[nxt + 1][i] = input[j][i] * 2;
                                tmp = -1;
                                MAX = Math.max(MAX,after[nxt + 1][i]);
                            } else {
                                after[nxt][i] = input[j][i];
                                tmp = input[j][i];
                                nxt--;
                            }
                        }
                    }
                }
                break;
            case 2:
                for(int i=0;i<N;i++){
                    int tmp = -1; //이전 숫자
                    int nxt = 0; //시작 인덱스
                    for(int j=0;j<N;j++){
                        if(input[i][j]==0) continue;
                        else {
                            if (tmp == input[i][j]) {
                                after[i][nxt - 1] = input[i][j] * 2;
                                tmp = -1;
                                MAX = Math.max(MAX,after[i][nxt - 1]);
                            } else {
                                after[i][nxt] = input[i][j];
                                tmp = input[i][j];
                                nxt++;
                            }
                        }
                    }
                }
                break;
            case 3:
                for(int i=0;i<N;i++){
                    int tmp = -1; //이전 숫자
                    int nxt = N-1; //시작 인덱스
                    for(int j=N-1;j>=0;j--){
                        if(input[i][j]==0) continue;
                        else {
                            if (tmp == input[i][j]) {
                                after[i][nxt + 1] = input[i][j] * 2;
                                tmp = -1;
                                MAX = Math.max(MAX,after[i][nxt + 1]);
                            } else {
                                after[i][nxt] = input[i][j];
                                tmp = input[i][j];
                                nxt--;
                            }
                        }
                    }
                }
                break;
        }
        return after;
    }

    public static void main(String args[]) throws Exception
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        N = Integer.parseInt(br.readLine());
        map = new int[N][N];
        MAX = 0;

        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j<N;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
                MAX = Math.max(MAX,map[i][j]);
            }
        }
        dfs(map,0);
        System.out.println(MAX);
    }
}