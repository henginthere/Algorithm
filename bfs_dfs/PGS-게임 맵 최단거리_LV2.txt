import java.util.*;
class Solution {
    
    static int[] dx = {0,0,-1,1};
    static int[] dy = {-1,1,0,0};
    static int n,m;
    static boolean[][] visited;
    
    public int bfs(int[][] maps){

        visited[0][0]=true; //방문체크
        Queue<Pos> queue = new LinkedList<>();
        queue.add(new Pos(0,0,1));
        
        while(!queue.isEmpty()){
            Pos cur = queue.poll();
            
            if(cur.x == n-1 && cur.y ==m-1){ //bfs로 제일 먼저 찾은게 최단경로
                return cur.cnt;
            }
            
            for(int i=0;i<4;i++){
                int nx = cur.x+dx[i];
                int ny = cur.y+dy[i];
                
                if(!isIn(nx,ny)||visited[nx][ny]||maps[nx][ny]==0) continue;
                visited[nx][ny] = true;
                int cnt = cur.cnt+1;
                queue.add(new Pos(nx,ny,cnt));
                
            }
        }
        return -1;
        
    }
    
    static boolean isIn(int x, int y){
        if(x<0||x>n-1||y<0||y>m-1) return false;
        return true;
    }
    
    public int solution(int[][] maps) {
        int answer = 0;
        n = maps.length;
        m = maps[0].length;
        visited = new boolean[n][m];
        answer = bfs(maps);
        return answer;
    }
}

class Pos{
    int x, y, cnt;
    
    public Pos(int x, int y, int cnt){
        this.x = x;
        this.y = y;
        this.cnt = cnt;
    }
}
