import java.io.*;
import java.util.*;

public class Main {

    static int N,M;
    static int r,c,d;
    static int answer;

    static int[][] map;
    static int[] dx = {-1,0,1,0}; //북, 동, 남, 서
    static int[] dy = {0,1,0,-1};

    static void start(int x, int y, int d){

        if(map[x][y]==1) return;
        else if(map[x][y]==0){
            map[x][y]=2;
            answer++;
        }

        for(int i=0;i<4;i++){
            d = (d+3) % 4; //반시계 방향으로 탐색해야한다
            int nx = x + dx[d];
            int ny = y + dy[d];

            //이미 청소 했거나 벽일 경우
            if(map[nx][ny]>0) continue;
            start(nx,ny,d);
            return;
        }
        //네 방향 다 돌아보고 나서 바라보는 방향 유지한 채 한칸 후진 후 다시 탐색 시작
        start(x-dx[d], y-dy[d],d);
        
    }


    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        r = Integer.parseInt(st.nextToken());
        c = Integer.parseInt(st.nextToken());
        d = Integer.parseInt(st.nextToken());

        answer = 0;
        map = new int[N][M];
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j<M;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        start(r, c, d);
        System.out.println(answer);

    }
}



