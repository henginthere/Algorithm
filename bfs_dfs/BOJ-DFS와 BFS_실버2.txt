import java.io.*;
import java.util.*;


public class Main {


    static Queue<Integer> queue = new LinkedList<>();
    static int N, M, V;
    static boolean[][] map;
    static boolean[] visited;
    static void dfs(int x){
        visited[x]=true; //방문체크
        System.out.print(x+" ");
        for(int i=1;i<=N;i++){
            if(!visited[i]&&map[i][x]&&map[x][i]){
                dfs(i);
            }
        }

    }

    static void bfs(int x){

        visited[x]=true;
        while(!queue.isEmpty()){
            int tmp = queue.poll();
            System.out.print(tmp+" ");
            for(int i=1;i<=N;i++){
                if(!visited[i]&&map[i][tmp]&&map[tmp][i]){
                    queue.add(i);
                    visited[i]=true;
                }
            }
        }

    }
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st;
        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        V = Integer.parseInt(st.nextToken());
        map = new boolean[N+1][N+1];
        visited = new boolean[N+1];

        for(int i=0;i<M;i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            map[x][y]=true;
            map[y][x]=true;
        }


        //dfs
        dfs(V);
        System.out.println();

        //bfs
        queue.add(V);
        for(int i=0;i<=N;i++){
            visited[i]=false;
        }
        bfs(V);

    }
}



