import java.io.*;
import java.util.*;

class Node{
    int index;
    int val;
    Node(int index, int val){
        this.index = index;
        this.val = val;
    }
}

public class Main {
    static int N, Q;

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        StringBuilder sb = new StringBuilder();


        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        Q = Integer.parseInt(st.nextToken());
        ArrayList<Node>[] graph = new ArrayList[N+1];

        for(int i=1;i<=N;i++){
            graph[i] = new ArrayList<>();
        }

        for(int i=1;i<N;i++){
            st = new StringTokenizer(br.readLine());
            int p = Integer.parseInt(st.nextToken());
            int q = Integer.parseInt(st.nextToken());
            int r = Integer.parseInt(st.nextToken());
            graph[p].add(new Node(q,r));
            graph[q].add(new Node(p,r));
        }

        for(int i=0;i<Q;i++){
            st = new StringTokenizer(br.readLine());
            int k = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            //k일때 v를 보고있는 소들에게 영상 추천

            boolean visited[] = new boolean[N+1];
            visited[v] = true;
            Queue<Integer> queue = new LinkedList<>();
            queue.add(v);

            int ans = 0;
            while(!queue.isEmpty()){
                int tmp = queue.poll();
                ArrayList<Node> list = graph[tmp];
                for(Node x:list){
                    if(!visited[x.index]&&x.val>=k){
                        queue.add(x.index);
                        visited[x.index]=true;
                        ans++;
                    }
                }
            }
            sb.append(ans).append('\n');
        }

        System.out.println(sb.toString());
    }
}



